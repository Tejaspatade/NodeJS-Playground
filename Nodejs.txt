Node.js is a JS runtime run on server side using Google Chrome's V8 Engine.
Used for fast and scalable data driven apps. It is a single threaded, non blocking I/O model,  event driven.


Event driven architecture means any significant action leads to an event emitter emitting an event. Event loop then picks up thes events and calls respective callback functions attached to them.

Synchronous code is blocking code as its executed line by line. Every file is treated as a module. Node.js is dependent on V8 and Libuv(C++ based f/w). Libuv provides a thread pool where heavy and time consuming tasks are offloaded so as to not block the single main thread.

---------------------------------------------------------------------

Dependencies can be normal or development/code dependencies. The 2nd type of dependencies are just for development purpose like webpack whereas the 1st type are required for functioning of the app like express framework. For local dependencies, we define scripts in package.json that can be run with npm.

---------------------------------------------------------------------

Streams are used to read/write data piece by piece without completing whole operation meaning without keeping all data in memory. We continously keep on reading chunks of data from a readable stream, every time theres more data available, the data event is emitted.

---------------------------------------------------------------------

require():
1. Resolve & load the module: Check in core modules, developer modules if specified relative path like ./ and finally searched in npm node-modules/
2. Wrapped: wrapped in IIFE where certain objs are passed in. Used to achieve private scope for all modules.
3. Execution.
4. Returns exports
5. Caching.

---------------------------------------------------------------------

Static vs Dynamic vs API:
Static sites have readymade html, css, js files on the server that just need to be fetched for the frontend browser to render. Dyanmic sites usually take data from a DB(mongoDB), generate the website using this dynamic data and some templates and then fetches these over the internet to client(this is called server side rendering where we prep the html, css, js dynamically based on data from db). API based sites only have to get data from DB on the server side, and send this raw data to client side where its used to form the final code to be rendered using frameworks/libraries like React/Vue(here server side consists of only retrieving data from DB and building the API to send th data to client side where its called as consuming API).

API based apps can be used to send this same data to different types of apps and not just browsers. With server side rendereing of dynamic sites, we are stuck with only rendered pages that can be only sent to a browser.

---------------------------------------------------------------------

API & REST: 
Piece of s/w used by another s/w to allow applications to communicate.
REST stands for REpresentational State Transfer. An API following REST principles is called as a RESTful API. 

Principles:
1. Separate API into Logical resources: Resources are objs w/ data associated to them. Any named info is a resource.
2. Expose structured resource-based URLs: Based on all resources identified, each resource should be made available(exposed) using a well structured URL.
3. Use appropriate Http methods to perform actions: Only have resources in endpoint URL and use the HTTP requests to define the type of action to be performed with the resource.
4. Send data as JSON: Use JS Object Notation format when sending/recieving data. Before sending data however, we perform some response formatting like the JSend format.
5. Be stateless: State is any data about the app that may change over time. All state should be handled on the client side. Server should not be concerned with the state of the app at all.

---------------------------------------------------------------------

Express:
Import Expresss, invoke it express() and store it in an obj. Use the object for different types of requests like GET,POST,DELETE,PUT,PATCH,etc. Finally invoke listen(port no, callback) on object to initialise server.

response.status(code): Status code. 200 -> OK, 201 -> Created, 204 -> No Content, 400 -> Bad Request, 404 -> Error, 500 -> Internal Server Error
response.json(): Send JSON data.

Note: Include Version for API in url so that newer versions dont break app that use the older version.

Request Response life cycle starts when client generates a request. The req and res objs are instatntiated that pass thru all the middleware and finally send back the response with the last middleware which is the router.

Middleware: Functions executed before we recieve request and send a response. Usually used to parse body, logging in functionality, setting headers, routing, etc.  They are altogether called middleware stack.

We can add more to the middleware stack using app.use((req, res, next) => {}).

---------------------------------------------------------------------

Env Variables:
Development
Production